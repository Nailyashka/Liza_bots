from aiogram.types import KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
from aiogram import types
from aiogram.types import CallbackQuery



def admin_main_keyboard():
    kb = ReplyKeyboardBuilder()
    kb.add(
        KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"),
        KeyboardButton(text="üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤")
    )

    return kb.adjust(2,).as_markup(resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
# –£ –º–µ–Ω—è —É–∂–µ –µ—Å—Ç—å –æ–ø—ã—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –∑–∞–∫–∞–∑–æ–≤: –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã, ORM.
# –î–ª—è –º–µ–Ω—è –≤–∞–∂–Ω–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–∏—Å–∞—Ç—å –∫–æ–¥, –∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–µ —Ä–µ—à–µ–Ω–∏—è. –£—á—ë–±–∞ –≤ –õ–∏—Ü–µ–µ ‚Äî —ç—Ç–æ –ª–æ–≥–∏—á–Ω—ã–π —à–∞–≥,
# —á—Ç–æ–±—ã —Å–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞–Ω–∏—è –∏ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏.¬ª

def superadmin_main_keyboard():
    kb = ReplyKeyboardBuilder()
    kb.add(
        KeyboardButton(text="üëë –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞"),
        KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞"),
        KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤")
    )
    kb.add(
        KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"),
    )

    return kb.adjust(3, 3,).as_markup(resize_keyboard=True, input_field_placeholder="–ü—Ä–∏–≤–µ—Ç, –ë–æ—Å—Å üëë")

def product_manage_keyboard(product_id: int, page: int):
    kb = InlineKeyboardBuilder()
    kb.row(
        InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{product_id}")
    )
    return kb.as_markup()

def products_pagination_keyboard(page: int, has_prev: bool, has_next: bool):
    kb = InlineKeyboardBuilder()
    nav_buttons = []
    if has_prev:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"products_page:{page-1}"))
    if has_next:
        nav_buttons.append(InlineKeyboardButton(text="–õ–∏—Å—Ç–∞–π –∫–∞—Ç–∞–ª–æ–≥ ‚û°Ô∏è", callback_data=f"products_page:{page+1}"))
    if nav_buttons:
        kb.row(*nav_buttons)
    return kb.as_markup()



from aiogram.exceptions import TelegramBadRequest

async def send_product_card(message_or_call, product, page: int, has_prev: bool = False, has_next: bool = False):
    from aiogram.types import InputMediaPhoto, InlineKeyboardButton
    from aiogram.utils.keyboard import InlineKeyboardBuilder

    text = f"<b>‚ú® {product.name}</b>\n<i>–°–£–ú–ö–ê –ò–ó –ë–£–°–ò–ù</i>\n‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢"

    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_name:{product.id}"))
    kb.row(InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{product.id}"))

    nav = []
    if has_prev:
        nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"products_page:{page-1}"))
    if has_next:
        nav.append(InlineKeyboardButton(text="–õ–∏—Å—Ç–∞–π –∫–∞—Ç–∞–ª–æ–≥ ‚û°Ô∏è", callback_data=f"products_page:{page+1}"))
    if nav:
        kb.row(*nav)

    markup = kb.as_markup()

    try:
        if isinstance(message_or_call, types.CallbackQuery):
            await message_or_call.message.edit_media(
                media=InputMediaPhoto(media=product.photo_url, caption=text, parse_mode="HTML"),
                reply_markup=markup
            )
        else:
            await message_or_call.answer_photo(
                product.photo_url,
                caption=text,
                reply_markup=markup,
                parse_mode="HTML"
            )
    except TelegramBadRequest as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message_or_call.message.answer_photo(
            product.photo_url,
            caption=text,
            reply_markup=markup,
            parse_mode="HTML"
        )
