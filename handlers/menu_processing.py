from venv import logger
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.types import InputMediaPhoto

from keyboards.menu_keyboards import build_product_keyboard
from orm_query.paginator import UniversalPaginator, pages

from keyboards.inline import  get_user_main_btns
from orm_query.product import get_products_page


async def menu_level_0(session, level, menu_name):
    # –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç, –±–µ–∑ –±–∞–Ω–Ω–µ—Ä–∞
    welcome_text = """
<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã</b>
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç-–∫–∞—Ç–∞–ª–æ–≥ <i>–∏–∑–¥–µ–ª–∏–π —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã</i> üëú‚ú®

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
üîπ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç  
üîπ –í—ã–±—Ä–∞—Ç—å –ø–æ–Ω—Ä–∞–≤–∏–≤—à—É—é—Å—è —Å—É–º–∫—É  
üîπ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –≤ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤  
üîπ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –º–∞—Å—Ç–µ—Ä—É  

–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º! –ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å üòä

<b>–ù–∞—á–Ω—ë–º? ‚¨áÔ∏è</b>
            """
    keyboard_markup = get_user_main_btns(level=level)
    return welcome_text, keyboard_markup



async def menu_level_1(session: AsyncSession, level: int, menu_name: str, page: int = 1):
    per_page = 1
    result = await get_products_page(session, page, per_page)

    print(f"Page={page}, has_previous={result['has_previous']}, has_next={result['has_next']}, total_count={result['total_count']}")

    items = result["items"]
    if not items:
        return "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", None

    product = items[0]

    if product.photo_url:
        content = InputMediaPhoto(
            media=product.photo_url,
            caption=(
                f"<b>‚ú® {product.name}</b>\n"
                f"<i>–°–£–ú–ö–ê –ò–ó –ë–£–°–ò–ù</i>\n"
                f"‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢"
            ),
            parse_mode="HTML"
        )
    else:
        content = (
            f"<b>‚ú® {product.name}</b>\n"
            f"<i>–°–£–ú–ö–ê –ò–ó –ë–£–°–ò–ù</i>\n"
            f"‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢"
        )

    keyboard = build_product_keyboard(
        level=level,
        menu_name=menu_name,
        page=page,
        has_previous=result["has_previous"],
        has_next=result["has_next"],
        product_id=product.id,
    )

    return content, keyboard


     
async def get_menu_level_content(session: AsyncSession, level: int, menu_name: str, page: int = 1):
    if level == 0:
        return await menu_level_0(session, level, menu_name)
    elif level == 1:
        return await menu_level_1(session, level, menu_name, page)
   
    
    