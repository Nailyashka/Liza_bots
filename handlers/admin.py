# handlers/admin_products.py
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.filters import Command
from aiogram.types import InputMediaPhoto

from states.product_state import ProductEdit, ProductForm
from orm_query.admin import (
    add_product, get_products, soft_delete_product,
    update_product_name
)
from keyboards.admin_kb import admin_main_keyboard, product_manage_keyboard, send_product_card

admin_router = Router()

# --- –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
@admin_router.message(Command("admin"))
async def admin_panel(message: types.Message, session: AsyncSession):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –í–æ—Ç —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=admin_main_keyboard()
    )

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ---
@admin_router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def add_product_start(message: types.Message, state: FSMContext):
    await state.set_state(ProductForm.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@admin_router.message(ProductForm.name)
async def add_product_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(ProductForm.photo)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:")

@admin_router.message(ProductForm.photo, F.photo)
async def add_product_photo(message: types.Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    photo_url = message.photo[-1].file_id

    await add_product(session=session, name=data["name"], photo_url=photo_url)
    await state.clear()
    await message.delete()

    result = await get_products(session, page=1)
    if not result["items"]:
        await message.answer("üì≠ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        return

    await send_product_card(
        message_or_call=message,
        product=result["items"][0],
        page=result["page"],
        has_prev=result["has_previous"],
        has_next=result["has_next"]
    )

# --- –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ ---
@admin_router.message(F.text == "üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤")
async def list_products(message: types.Message, session: AsyncSession):
    result = await get_products(session, page=1)
    if not result["items"]:
        await message.answer("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    await send_product_card(
        message_or_call=message,
        product=result["items"][0],
        page=result["page"],
        has_prev=result["has_previous"],
        has_next=result["has_next"]
    )

# --- –ü–∞–≥–∏–Ω–∞—Ü–∏—è ---
@admin_router.callback_query(F.data.startswith("products_page:"))
async def products_page_callback(call: types.CallbackQuery, session: AsyncSession):
    page = int(call.data.split(":")[1])
    result = await get_products(session, page=page)
    if not result["items"]:
        await call.answer("üì≠ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ", show_alert=True)
        return

    await send_product_card(
        message_or_call=call,
        product=result["items"][0],
        page=result["page"],
        has_prev=result["has_previous"],
        has_next=result["has_next"]
    )
    await call.answer()

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è ---
@admin_router.callback_query(F.data.startswith("edit_name:"))
async def start_edit_name(call: types.CallbackQuery, state: FSMContext):
    product_id = int(call.data.split(":")[1])
    await state.update_data(edit_id=product_id)
    await state.set_state(ProductEdit.name)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@admin_router.message(ProductEdit.name)
async def edit_product_name(message: types.Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    product_id = data["edit_id"]

    success = await update_product_name(session, product_id, message.text)
    if not success:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è")
        await state.clear()
        return

    result = await get_products(session, page=1)
    product = next((p for p in result["items"] if p.id == product_id), None)
    if not product:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä")
        await state.clear()
        return

    await send_product_card(
        message_or_call=message,
        product=product,
        page=result["page"],
        has_prev=result["has_previous"],
        has_next=result["has_next"]
    )
    await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ!")
    await state.clear()

# --- –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ---
@admin_router.callback_query(F.data.startswith("delete:"))
async def delete_product_handler(call: types.CallbackQuery, session: AsyncSession):
    product_id = int(call.data.split(":")[1])
    await soft_delete_product(session, product_id)

    page = 1
    result = await get_products(session, page=page)
    await call.message.delete()
    await call.answer("‚ùå –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω")

    if not result["items"]:
        await call.message.answer(
            "üì≠ –¢–æ–≤–∞—Ä–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç.\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä.",
            reply_markup=admin_main_keyboard()
        )
    else:
        await send_product_card(
            message_or_call=call,
            product=result["items"][0],
            page=result["page"],
            has_prev=result["has_previous"],
            has_next=result["has_next"]
        )
