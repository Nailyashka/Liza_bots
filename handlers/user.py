import os
import logging
from venv import logger
from aiogram.types import Message, CallbackQuery
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart
from aiogram import Router
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram import F
from aiogram.exceptions import TelegramMigrateToChat
from dotenv import load_dotenv

from sqlalchemy.exc import SQLAlchemyError

from handlers.menu_processing import get_menu_level_content
from keyboards.inline import MenuCallBack
from models.users_model import User
from states.order_state import OrderForm

user_menu = Router()
    
    
@user_menu.message(CommandStart())
async def cmd_start(message: Message, session: AsyncSession):
    content, reply_markup = await get_menu_level_content(session, level=0, menu_name='main')
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏—à–ª–æ ‚Äî —Ç–µ–∫—Å—Ç –∏–ª–∏ InputMediaPhoto
    if isinstance(content, str):
        await message.answer(text=content,parse_mode='HTML', reply_markup=reply_markup)
    else:
        await message.answer_photo(photo=content.media, caption=content.caption, reply_markup=reply_markup)

@user_menu.callback_query(MenuCallBack.filter())
async def menu_callback_handler(
    callback: CallbackQuery,
    callback_data: MenuCallBack,
    state: FSMContext,
    session: AsyncSession
):
    logging.info(f"Callback received: level={callback_data.level}, page={callback_data.page}")
    print(f"Callback data: level={callback_data.level}, page={callback_data.page}, menu_name={callback_data.menu_name}")

    # –ï—Å–ª–∏ level == 5 ‚Üí –∑–∞–ø—É—Å–∫–∞–µ–º FSM
    if callback_data.level == 5:
        await state.clear()
        await state.set_state(OrderForm.color)  # –ó–∞–ø—É—Å–∫–∞–µ–º FSM —Å —à–∞–≥–∞ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ü–≤–µ—Ç üñå")
        await callback.answer()
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, —á—Ç–æ–±—ã –Ω–µ —à–ª–∞ –¥–∞–ª—å—à–µ –ª–æ–≥–∏–∫–∞ –º–µ–Ω—é

    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π ‚Äî –ª–æ–≥–∏–∫–∞ –º–µ–Ω—é
    content, markup = await get_menu_level_content(
        session=session,
        level=callback_data.level,
        menu_name=callback_data.menu_name,
        page=callback_data.page
    )
    print("Returned from get_menu_level_content")

    if isinstance(content, str):
        await callback.message.edit_text(content, reply_markup=markup, parse_mode='HTML')
    else:
        await callback.message.edit_media(media=content, reply_markup=markup)

    await callback.answer()




@user_menu.message(F.photo)
async def photo_test(message:Message):
    await message.answer(message.photo[-1].file_id)


from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from sqlalchemy import select
from models.users_model import User
from states.order_state import OrderForm


# –®–∞–≥ 1: –≤–≤–æ–¥ —Ü–≤–µ—Ç–∞ (–æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç)
@user_menu.message(OrderForm.color)
async def process_color(message: types.Message, state: FSMContext):
    await state.update_data(color=message.text)

    # Reply-–∫–Ω–æ–ø–∫–∏ "–î–∞"/"–ù–µ—Ç" –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await state.set_state(OrderForm.lining)
    await message.answer("–ñ–µ–ª–∞–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–∫–ª–∞–¥–∫—É?", reply_markup=keyboard)


# –®–∞–≥ 2: –æ—Ç–≤–µ—Ç "–î–∞" –∏–ª–∏ "–ù–µ—Ç" ‚Äî –≤–≤–æ–¥ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫
# @user_menu.message(OrderForm.lining)
# async def process_lining(message: types.Message, state: FSMContext):
#     if message.text == "–î–∞":
#         # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–≤–µ—Å—Ç–∏ –ø–æ–¥–∫–ª–∞–¥–∫—É, –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏
#         await state.set_state(OrderForm.lining_text)
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ø–æ–¥–∫–ª–∞–¥ ‚úÇ", reply_markup=ReplyKeyboardRemove())
#     elif message.text == "–ù–µ—Ç":
#         # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –ø–æ–¥–∫–ª–∞–¥–∫—É, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
#         await state.update_data(lining="(–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)")
#         await state.set_state(OrderForm.comment)
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π üìù", reply_markup=ReplyKeyboardRemove())
#     else:
#         # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Äî –ø—Ä–æ—Å–∏–º –æ—Ç–≤–µ—Ç–∏—Ç—å "–î–∞" –∏–ª–∏ "–ù–µ—Ç"
#         await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç" –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.')


# –®–∞–≥ 2.1: –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ "–î–∞")
@user_menu.message(OrderForm.lining)
async def process_lining_text(message: types.Message, state: FSMContext):
    await state.update_data(lining=message.text)
    await state.set_state(OrderForm.comment)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–ª—è –∫–∞–∫–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è üìù")


# –®–∞–≥ 3: –≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç)
@user_menu.message(OrderForm.comment)
async def process_comment(message: types.Message, state: FSMContext):
    await state.update_data(comment=message.text)

    # Reply –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ (–∑–¥–µ—Å—å –ø—Ä–∏–º–µ—Ä: –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å)
    
    
    await state.set_state(OrderForm.city)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ üèô")


# –®–∞–≥ 4: –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"
@user_menu.message(OrderForm.city)
async def process_city(message: types.Message, state: FSMContext):
    if message.contact:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏–ª—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º (–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å)
        # –¢—É—Ç –º–æ–∂–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        await state.update_data(contact=message.contact.phone_number)
        await state.set_state(OrderForm.final)
        await message.answer("–°–ø–∞—Å–∏–±–æ, –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–∫–∞–∑.", reply_markup=ReplyKeyboardRemove())
        # –ú–æ–∂–Ω–æ –∑–¥–µ—Å—å –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –≥–æ—Ä–æ–¥ —Ç–µ–∫—Å—Ç–æ–º
        await state.update_data(city=message.text)
        # –¢–µ–ø–µ—Ä—å —Å–ø—Ä–æ—Å–∏–º –∫–æ–Ω—Ç–∞–∫—Ç —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await state.set_state(OrderForm.contact)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üìû –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", reply_markup=keyboard)


# –®–∞–≥ 5: –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"
@user_menu.message(OrderForm.contact)
async def process_contact(message: types.Message, state: FSMContext, session: AsyncSession):
    if message.contact:
        phone = message.contact.phone_number
    else:
        phone = message.text

    await state.update_data(contact=phone)

    data = await state.get_data()

    client_message = (
        f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n"
        f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
        f"–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º."
    )
    admin_message = (
        f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
        f"–¢–æ–≤–∞—Ä: –¢—É—Ç —Ç–æ–≤–∞—Ä\n"
        f"–¶–≤–µ—Ç: {data.get('color')}\n"
        f"–ü–æ–¥–∫–ª–∞–¥: {data.get('lining')}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment')}\n"
        f"–ì–æ—Ä–æ–¥: {data.get('city')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('contact')}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or message.from_user.full_name}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É
    await message.answer(client_message, reply_markup=ReplyKeyboardRemove())
    await state.clear()

    # –ü–æ–ª—É—á–∞–µ–º —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–≤
    result = await session.execute(
        select(User).where(User.role == "superadmin")
    )
    admins_list = result.scalars().all()

    for admin in admins_list:
        await message.bot.send_message(admin.tg_id, admin_message, parse_mode="HTML")

    await message.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.", reply_markup=ReplyKeyboardRemove())
