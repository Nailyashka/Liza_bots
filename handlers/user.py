import os
import logging
from venv import logger
from dotenv import load_dotenv

from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import CommandStart
from aiogram.exceptions import TelegramMigrateToChat
from aiogram.fsm.context import FSMContext

from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.exc import SQLAlchemyError

from models.users_model import User
from orm_query.orders import create_order
from orm_query.product import find_product
from orm_query.user import find_user_by_id
from states.order_state import OrderForm
from handlers.menu_processing import get_menu_level_content
from keyboards.inline import MenuCallBack
from keyboards.reply_kb import keyboard_yes_no, keyboard_phone
from utils.check_function import validate_city, validate_phone


user_menu = Router()
    

@user_menu.message(F.text == "—Ç")
async def test_product(message: Message, session: AsyncSession):
    product = await find_product(session, 1)  # –ø–æ—Å—Ç–∞–≤—å —Ä–µ–∞–ª—å–Ω—ã–π ID –∏–∑ –±–∞–∑—ã
    await message.answer(f"–ü—Ä–æ–¥—É–∫—Ç: {product.name if product else '–ù–µ –Ω–∞–π–¥–µ–Ω'}")

@user_menu.message(CommandStart())
async def cmd_start(message: Message, session: AsyncSession):
    content, reply_markup = await get_menu_level_content(session, level=0, menu_name='main')
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏—à–ª–æ ‚Äî —Ç–µ–∫—Å—Ç –∏–ª–∏ InputMediaPhoto
    if isinstance(content, str):
        await message.answer(text=content,parse_mode='HTML', reply_markup=reply_markup)
    else:
        await message.answer_photo(photo=content.media, caption=content.caption, reply_markup=reply_markup)

@user_menu.callback_query(MenuCallBack.filter())
async def menu_callback_handler(
    callback: CallbackQuery,
    callback_data: MenuCallBack,
    state: FSMContext,
    session: AsyncSession
):
    logging.info(f"Callback received: level={callback_data.level}, page={callback_data.page}")
    print(f"Callback data: level={callback_data.level}, page={callback_data.page}, menu_name={callback_data.menu_name}")

    # –ï—Å–ª–∏ level == 5 ‚Üí –∑–∞–ø—É—Å–∫–∞–µ–º FSM
    if callback_data.level == 5:
        await state.clear()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º product_id –≤ FSM
        await state.update_data(product_id=callback_data.product_id)
        await state.set_state(OrderForm.color)  # –ó–∞–ø—É—Å–∫–∞–µ–º FSM —Å —à–∞–≥–∞ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ü–≤–µ—Ç üñå")
        await callback.answer()
        return

    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π ‚Äî –ª–æ–≥–∏–∫–∞ –º–µ–Ω—é
    content, markup = await get_menu_level_content(
        session=session,
        level=callback_data.level,
        menu_name=callback_data.menu_name,
        page=callback_data.page
    )
    print("Returned from get_menu_level_content")

    if isinstance(content, str):
        await callback.message.edit_text(content, reply_markup=markup, parse_mode='HTML')
    else:
        await callback.message.edit_media(media=content, reply_markup=markup)

    await callback.answer()

# @user_menu.message(F.photo)
# async def photo_test(message:Message):
#     await message.answer(message.photo[-1].file_id)

# –®–∞–≥ 1: –≤–≤–æ–¥ —Ü–≤–µ—Ç–∞ (–æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç)
@user_menu.message(OrderForm.color)
async def process_color(message: types.Message, state: FSMContext):
    await state.update_data(color=message.text)

    await state.set_state(OrderForm.lining)
    await message.answer("–ñ–µ–ª–∞–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥–∫–ª–∞–¥–∫—É?", reply_markup=keyboard_yes_no)



# –®–∞–≥ 2.1: –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ "–î–∞")
@user_menu.message(OrderForm.lining)
async def process_lining_text(message: types.Message, state: FSMContext):
    await state.update_data(lining=message.text)
    await state.set_state(OrderForm.comment)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–ª—è –∫–∞–∫–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è üìù", reply_markup=ReplyKeyboardRemove())


# –®–∞–≥ 3: –≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç)
@user_menu.message(OrderForm.comment)
async def process_comment(message: types.Message, state: FSMContext):
    await state.update_data(comment=message.text)

    # Reply –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ (–∑–¥–µ—Å—å –ø—Ä–∏–º–µ—Ä: –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å)
    
    
    await state.set_state(OrderForm.city)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ üèô")


# –®–∞–≥ 4: –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"
@user_menu.message(OrderForm.city)
async def process_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    # –¢–µ–ø–µ—Ä—å —Å–ø—Ä–æ—Å–∏–º –∫–æ–Ω—Ç–∞–∫—Ç —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"
    await state.set_state(OrderForm.contact)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üìû –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", reply_markup=keyboard_phone)


# –®–∞–≥ 5: –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"
@user_menu.message(OrderForm.contact)
async def process_contact(message: types.Message, state: FSMContext, session: AsyncSession):
    tg_id = message.from_user.id
    
    if message.contact:
        phone = message.contact.phone_number
    else:
        phone = message.text

    if not validate_phone(phone):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+79998887766)")
        return

    data = await state.get_data()

    if not validate_city(data.get("city", "")):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ—Ä–æ–¥")
        return

    await state.update_data(contact=phone)
    data = await state.get_data()
    user = await find_user_by_id(session, tg_id)

    # ‚úÖ –ë–µ—Ä—ë–º product_id –∏–∑ FSM
    product_id = data.get("product_id")
    product = await find_product(session,product_id)

    order = await create_order(
        session=session,
        user_id=user.id,
        product_id=product_id,  # —Ç–µ–ø–µ—Ä—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π ID
        color=data["color"],
        lining=data["lining"].lower() == "–¥–∞",
        event=data["comment"],
        city=data["city"],
        phone=data["contact"]
    )

    data = await state.get_data()

    client_message = (
        f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n"
        f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
        f"–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º."
    )
    # üì¶ –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞
    admin_message = (
        f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
        f"–¢–æ–≤–∞—Ä: {product.name if product else '–ù–µ –Ω–∞–π–¥–µ–Ω'}\n"
        f"–¶–≤–µ—Ç: {data.get('color')}\n"
        f"–ü–æ–¥–∫–ª–∞–¥: {data.get('lining')}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment')}\n"
        f"–ì–æ—Ä–æ–¥: {data.get('city')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('contact')}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or message.from_user.full_name}"
    )


    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É
    await message.answer(client_message, reply_markup=ReplyKeyboardRemove())
    await state.clear()

    # –ü–æ–ª—É—á–∞–µ–º —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–≤
    result = await session.execute(
        select(User).where(User.role == "superadmin")
    )
    admins_list = result.scalars().all()

    for admin in admins_list:
        await message.bot.send_message(admin.tg_id, admin_message, parse_mode="HTML")

    await message.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.", reply_markup=ReplyKeyboardRemove())
